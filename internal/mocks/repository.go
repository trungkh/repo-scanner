// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "repo-scanner/internal/model"

	mock "github.com/stretchr/testify/mock"

	serror "repo-scanner/internal/utils/serror"
)

// IRepositoryRepository is an autogenerated mock type for the IRepositoryRepository type
type IRepositoryRepository struct {
	mock.Mock
}

// AddRepository provides a mock function with given fields: _a0, _a1
func (_m *IRepositoryRepository) AddRepository(_a0 *model.Trx, _a1 model.AddRepositoryRequest) (model.AddRepositoryResponse, serror.SError) {
	ret := _m.Called(_a0, _a1)

	var r0 model.AddRepositoryResponse
	if rf, ok := ret.Get(0).(func(*model.Trx, model.AddRepositoryRequest) model.AddRepositoryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.AddRepositoryResponse)
	}

	var r1 serror.SError
	if rf, ok := ret.Get(1).(func(*model.Trx, model.AddRepositoryRequest) serror.SError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(serror.SError)
		}
	}

	return r0, r1
}

// DeleteRepository provides a mock function with given fields: _a0, _a1
func (_m *IRepositoryRepository) DeleteRepository(_a0 *model.Trx, _a1 int64) serror.SError {
	ret := _m.Called(_a0, _a1)

	var r0 serror.SError
	if rf, ok := ret.Get(0).(func(*model.Trx, int64) serror.SError); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(serror.SError)
		}
	}

	return r0
}

// EditRepository provides a mock function with given fields: _a0, _a1
func (_m *IRepositoryRepository) EditRepository(_a0 *model.Trx, _a1 model.EditRepositoryRequest) (model.EditRepositoryResponse, serror.SError) {
	ret := _m.Called(_a0, _a1)

	var r0 model.EditRepositoryResponse
	if rf, ok := ret.Get(0).(func(*model.Trx, model.EditRepositoryRequest) model.EditRepositoryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.EditRepositoryResponse)
	}

	var r1 serror.SError
	if rf, ok := ret.Get(1).(func(*model.Trx, model.EditRepositoryRequest) serror.SError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(serror.SError)
		}
	}

	return r0, r1
}

// GetRepositoryById provides a mock function with given fields: repo_id
func (_m *IRepositoryRepository) GetRepositoryById(repo_id int64) (*model.Repository, serror.SError) {
	ret := _m.Called(repo_id)

	var r0 *model.Repository
	if rf, ok := ret.Get(0).(func(int64) *model.Repository); ok {
		r0 = rf(repo_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Repository)
		}
	}

	var r1 serror.SError
	if rf, ok := ret.Get(1).(func(int64) serror.SError); ok {
		r1 = rf(repo_id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(serror.SError)
		}
	}

	return r0, r1
}

// GetRepositoryList provides a mock function with given fields: _a0
func (_m *IRepositoryRepository) GetRepositoryList(_a0 model.RepositoryListRequest) ([]model.RepositoryListResponse, serror.SError) {
	ret := _m.Called(_a0)

	var r0 []model.RepositoryListResponse
	if rf, ok := ret.Get(0).(func(model.RepositoryListRequest) []model.RepositoryListResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.RepositoryListResponse)
		}
	}

	var r1 serror.SError
	if rf, ok := ret.Get(1).(func(model.RepositoryListRequest) serror.SError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(serror.SError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositoryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositoryRepository creates a new instance of IRepositoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositoryRepository(t mockConstructorTestingTNewIRepositoryRepository) *IRepositoryRepository {
	mock := &IRepositoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
